// netstat_alert_stream

// metric: 'tcp_established'
// available_fields:  "tcp_close","tcp_close_wait","tcp_closing","tcp_established","tcp_fin_wait1","tcp_fin_wait2","tcp_last_ack","tcp_listen","tcp_none","tcp_syn_recv","cp_syn_sent","tcp_time_wait","udp_socket","tcp_listen"

// TELEGRAF CONFIGURATION
// [[inputs.netstat]]

// DEFINE: kapacitor define netstat_alert_stream -type stream -tick netstat/netstat_alert_stream.tick -dbrp telegraf.autogen
// ENABLE: kapacitor enable netstat_alert_stream

// Parameters

var info = 0.1
var warn = 0.3
var crit = 0.9
var unit = 1s

var rawdata = stream
  |from()
    .database('telegraf')
    .retentionPolicy('autogen')
    .measurement('netstat')
    .groupBy('region','host')

var tcp_established = rawdata
  |derivative('tcp_established')
    .as('value')
    .nonNegative()
    .unit(unit)

var tcp_time_wait = rawdata
  |derivative('tcp_time_wait')
    .as('value')
    .nonNegative()
    .unit(unit)

var tcp_close_wait = rawdata
  |derivative('tcp_close_wait')
    .as('value')
    .nonNegative()
    .unit(unit)

var data = tcp_close_wait
  |join(tcp_time_wait, tcp_established)
    .as('tcp_close_wait', 'tcp_time_wait', 'tcp_established')

var alert = data
  |alert()
    .id('{{ index .Tags "environment" }}/{{ index .Tags "region" }}/{{ index .Tags "host" }}/netstat')
    .message('{{ .ID }}: [{{ .Level }}] tcp_established={{ index .Fields "tcp_establised.value" }} tcp_time_wait={{ index .Fields "tcp_time_wait.value" }} tcp_close_wait={{ index .Fields "tcp_close_wait.value" }} derivatives')
    .info(lambda: "tcp_established.value" >= info OR "tcp_time_wait.value" >= info OR "tcp_close_wait.value" >= info)
    .info(lambda: "tcp_established.value" >= info OR "tcp_time_wait.value" >= info OR "tcp_close_wait.value" >= warn)
    .info(lambda: "tcp_established.value" >= info OR "tcp_time_wait.value" >= info OR "tcp_close_wait.value" >= crit)
    .topic('network')
    .log('/var/log/kapacitor/netstat_alert_stream.log')
