// Copyright 2018, OpenNext SAS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Alert:  haproxy_backend_alert
// Define: kapacitor define haproxy_backend_qcur_alert_stream -type stream \
//           -tick haproxy_backend_qcur_alert_stream.tick -dbrp telegraf.autogen
// Enable: kapacitor enable haproxy_backend_qcur_alert_stream

dbrp "telegraf"."autogen"
// Parameters
var info = 5
var warn = 10 
var crit = 20 
var infoSig = 2.5 
var warnSig = 3
var critSig = 3.5
var period = 5m 
var every = 1m 

// Dataframe
var data = stream
  |from()
    .database('telegraf')
    .retentionPolicy('autogen')
    .measurement('haproxy')
    .where(lambda: "type" == 'backend')
    .groupBy('region', 'host')
  |window()
    .period(period)
    .every(every)
  |mean('qcur')
    .as('stat')

// Thresholds
var alert = data
  |eval(lambda: sigma("stat"))
    .as('sigma')
    .keep()
  |alert()
    .id('{{ index .Tags "environment" }}/{{ index .Tags "region" }}/{{ index .Tags "host" }}/qcur')
    .message('{{ .ID }}: [{{ .Level }}] Backend requests waiting={{ index .Fields "stat" | printf "%0.2f" }}, stddev={{ index .Fields "sigma" | printf "%0.2f" }}')
    .info(lambda: "sigma" >= infoSig OR "stat" >= info)
    .warn(lambda: "sigma" >= warnSig OR "stat" >= warn)
    .crit(lambda: "sigma" >= critSig OR "stat" >= crit)
    .topic('haproxy')
    .log('/tmp/haproxy_backend_qcur.txt')