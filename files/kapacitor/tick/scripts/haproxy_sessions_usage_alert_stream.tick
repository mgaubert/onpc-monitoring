// Copyright 2018, OpenNext SAS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Alert:  haproxy_sessions_usage_alert
// Define: kapacitor define haproxy_sessions_usage_alert -type stream \
//           -tick haproxy_sessions_usage_alert.tick -dbrp telegraf.autogen
// Enable: kapacitor enable haproxy_sessions_usage_alert
//

var info = 60.0
var warn = 80.0 
var crit = 90.0
var period = 5m 
var every = 5m

// Dataframe
var rawdata = stream
  |from()
    .database('telegraf')
    .retentionPolicy('autogen')
    .measurement('haproxy')
    .where(lambda: "type" == 'frontend' OR "type" == 'backend')
    .groupBy('region', 'host', 'type', 'proxy')
  |window()
    .period(period)
    .every(every)
    .align()

var scur = rawdata
  |mean('scur')
    .as('value')

var slim = rawdata 
  |mean('slim')
    .as('value')

var data = slim
  |join(scur)
    .as('slim', 'scur')

var alert = data
  |eval(lambda: (float("scur.value") / float("slim.value")) * 100.0)
    .as('stat')
  |alert()
//    .id('{{ index .Tags "environment" }}/{{ index .Tags "region" }}/{{ index .Tags "host" }}/{{ index .Tags "type" }}/{{index .Tags "proxy" }}/sessions')
    .id('haproxy-{{ index .Tags "proxy" }}-session-alert')
    .message('{{ .ID }}: [{{ .Level }}] {{ index .Tags "host" }}/{{index .Tags "proxy" }}: HAProxy sessions usage = {{ index .Fields "stat" | printf "%0.2f" }}%')
    .info(lambda: "stat" >= info)
    .warn(lambda: "stat" >= warn)
    .crit(lambda: "stat" >= crit)
    .topic('haproxy')
//  .log('/var/log/kapacitor/haproxy_sessions_usage_alert.log')

