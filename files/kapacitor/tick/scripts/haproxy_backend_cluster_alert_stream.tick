// Copyright 2018, OpenNext SAS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Alert:  haproxy_backend_cluster_alert
// Define: kapacitor define haproxy_backend_cluster_alert_stream -type stream \
//           -tick haproxy_backend_cluster_alert_stream.tick -dbrp telegraf.autogen
// Enable: kapacitor enable haproxy_backend_cluster_alert_stream
//
dbrp "telegraf"."autogen"

var warn = 2/3
var crit = 1/3
var period = 2m
var every = 1m

var rawdata = stream
    |from()
        .database('telegraf')
        .retentionPolicy('autogen')
        .measurement('haproxy')
        .groupBy('region', 'proxy')
        .where(lambda: "type" == 'server')
    |window()
        .period(period)
        .every(every)
        .align()

var total = rawdata
    |count('status')
        .as('value')

var down = rawdata
    |where(lambda: "status" != 'DOWN')
    |count('status')
        .as('value')

var data = total
    |join(down)
        .as('total', 'down')

var alert = data
    |eval(lambda: 100.0 - ((float("down.value") / float("total.value") * 100.0)))
        .as('stat')
    |alert()
        .id('{{ index .Tags "environment" }}/{{ index .Tags "region" }}/{{ index .Tags "proxy" }}/cluster_status')
        .message('{{ .ID }}: [{{ .Level }}] Availability state of the cluster is {{ index .Fields "stat" }}%')
        .info(lambda: "stat" > warn)
        .warn(lambda: "stat" <= warn)
        .crit(lambda: "stat" <= crit)
        .topic('haproxy')
        .log('/tmp/haproxy_backend_cluster_alert_log.txt')